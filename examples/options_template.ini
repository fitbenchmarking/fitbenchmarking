##############################################################################
# This section is used to declare the minimizers to use for each fitting
# software. In most cases this can be left out and defaults will be sufficient
##############################################################################
[MINIMIZERS]

# To override the selection that is made by default, you should provide an
# entry for the software with a newline separated list of minimizers.
# default is all available minimizers as follows:

# bumps: available minimizers (amoeba, lm-bumps, newton, de, mp)
#          for more information see
#          https://bumps.readthedocs.io/en/latest/guide/optimizer.html
#bumps: amoeba
#         lm-bumps
#         newton
#         de
#         mp

# dfo: available minimimizers (dfogn, dfols)
#        for more information see
#        http://people.maths.ox.ac.uk/robertsl/dfogn/
#        http://people.maths.ox.ac.uk/robertsl/dfols/
#dfo: dfogn
#     dfols

# gsl: available minimizers (lmsder, lmder,
#                            nmsimplex, nmsimplex2,
#                            conjugate_pr, conjugate_fr,
#                            vector_bfgs, vector_bfgs2,
#                            steepest_descent)
#      for more information see
#      https://www.gnu.org/software/gsl/
#      or the pyGSL python interface
#      https://sourceforge.net/projects/pygsl/
#gsl: lmsder
#     lmder
#     nmsimplex
#     nmsimplex2
#     conjugate_pr
#     conjugate_fr
#     vector_bfgs
#     vector_bfgs2
#     steepest_descent

# mantid: avaliable minimizers (BFGS,
#             Conjugate gradient (Fletcher-Reeves imp.),
#             Conjugate gradient (Polak-Ribiere imp.), Damped GaussNewton,
#             Levenberg-Marquardt, Levenberg-MarquardtMD, Simplex,
#             SteepestDescent, Trust Region)
#          for more information see
#          https://docs.mantidproject.org/nightly/fitting/fitminimizers/
#mantid: BFGS
#        Conjugate gradient (Fletcher-Reeves imp.)
#        Conjugate gradient (Polak-Ribiere imp.)
#        Damped GaussNewton
#        Levenberg-Marquardt
#        Levenberg-MarquardtMD
#        Simplex
#        SteepestDescent
#        Trust Region

# minuit: available minimizers (minuit)
#         for more informations see
#         http://iminuit.readthedocs.org
#minuit: minuit

# ralfit: available minimizers (gn, gn_reg, hybrid, hybrid_reg)
#         for more information see
#         https://ralfit.readthedocs.io/projects/Python/en/latest/
#ralfit: gn
#        gn_reg
#        hybrid
#        hybrid_reg

# scipy: available minimizers (Nelder-Mead, Powell, CG, BFGS, Newton-CG,
#        L-BFGS-B, TNC, SLSQP)
#        for more information see scipy.optimize.minimize.html
#        https://docs.scipy.org/doc/scipy/reference/generated/
scipy: Nelder-Mead
       Powell
       CG
       BFGS
       Newton-CG
       L-BFGS-B
       TNC
       SLSQP

# scipy_ls: available minimizers (lm-scipy-no-jac, lm-scipy, trf, dogbox)
#           for more information see scipy.optimize.least_squares.html
#           https://docs.scipy.org/doc/scipy/reference/generated/
# Note: The minimizer "lm-scipy-no-jac" uses MINPACK's Jacobian evaluation
#       which are significantly faster and gives different results than
#       using the minimizer "lm-scipy" which uses problem.eval_j for the
#       Jacobian evaluation. We do not see significant speed changes or
#       difference in the accuracy results when running trf or dogbox with
#       or without problem.eval_j for the Jacobian evaluation
scipy_ls: lm-scipy-no-jac
          lm-scipy
          trf
          dogbox


##############################################################################
# The fitting section is used for options specific to running the benchmarking
##############################################################################
[FITTING]

# num_runs sets the number of runs to average each fit over
# default is 5
#num_runs: 5

# software is used to select the fitting software to benchmark, this should be
# a newline-separated list
# default is bumps, dfo, gsl, mantid, minuit, ralfit, and scipy
#software: bumps
#          dfo
#          gsl
#          mantid
#          minuit
#          ralfit
#          scipy

# use_errors will switch between weighted and unweighted least squares
# If no errors are supplied, then e[i] will be set to sqrt(abs(y[i])).
# Errors below 1.0e-8 will be clipped to that value.
# default is True (yes/no can also be used)
#use_errors: yes

# jac_method: Calls scipy.optimize._numdiff.approx_derivative which
#             calculates the Jacobians using Finite difference method:
#             '2-point'  use the first order accuracy forward or backward
#                         difference.
#             '3-point'  use central difference in interior points and the
#                        second order accuracy forward or backward difference
#                        near the boundary.
#             'cs'  use a complex-step finite difference scheme. This assumes
#                   that the user function is real-valued and can be
#                   analytically continued to the complex plane. Otherwise,
#                   produces bogus results.
#default '2-point'
#jac_method: 2-point

##############################################################################
# The plotting section contains options to control how results are presented
##############################################################################
[PLOTTING]

# make_plots is used to allow the user to either create plots during runtime.
#            Toggling this False will be much faster on small data sets.
# default True (yes/no can also be used)
#make_plots: yes

# colour_scale lists thresholds for each colour in the html table
#              In the below example, this means that values less than 1.1 will
#              have the top ranking (brightest) and values over 3 will show as
#              the worst ranking (deep red). One can change the bounds (1.1,
#              1.33, etc) and the colouring here or within the run script.
# default thresholds are 1.1, 1.33, 1.75, 3, and inf
#colour_scale: 1.1, #fef0d9
#              1.33, #fdcc8a
#              1.75, #fc8d59
#              3, #e34a33
#              inf, #b30000

# comparison_mode selects the mode for displaying values in the resulting
#                 table
#                 options are 'abs', 'rel', 'both'
#                 'abs' indicates that the absolute values should be displayed
#                 'rel' indicates that the values should all be relative to
#                       the best result
#                 'both' will show data in the form "abs (rel)"
# default is both
#comparison_mode: both

# table_type selects the types of tables to be produced in FitBenchmarking
#                 options are 'acc', 'runtime', 'compare'
#                 'acc' indicates that the resulting table should contain the
#                       chi_sq values for each of the minimizers
#                 'runtime' indicates that the resulting table should contain
#                           the runtime values for each of the minimizers
#                 'compare' indicates that the resulting table should contain
#                           both the chi_sq value and runtime values for each
#                           of the minimizers. The tables produced have the
#                           chi_sq values on the top line of the cell and the
#                           runtime on the bottom line of the cell.
#                 'local_min' indicates that the resulting table should return
#                             true or false value whether the software
#                             terminates at a local minimum and the
#                             value of norm(J^T r)/norm(r) for those
#                             parameters. The output looks like
#                             "{bool} (norm_value)" and the colouring
#                             is red for false and cream for true.
# default is 'acc', 'runtime', 'compare', and 'local_min'.
#table_type: acc
#            runtime
#            compare
#            local_min

# results_dir is used to select where the output should be saved
# default is results
#results_dir: results

##############################################################################
# The logging section contains options to control how fitbenchmarking logs
# information.
##############################################################################
[LOGGING]

# file_name specifies the file path to write the logs to
# default is fitbenchmarking.log
#file_name: fitbenchmarking.log

# append specifies whether to log in append mode or not.
# If append mode is active, the log file will be extended with each subsequent
# run, otherwise the log will be cleared after each run.
# default is False (on/off/yes/no can also be used)
#append: no

# level specifies the minimum level of logging to display on console during
# runtime.
# Options are (from most logging to least): NOTSET, DEBUG, INFO, WARNING,
#                                           ERROR, and CRITICAL
# default is INFO
#level: INFO

# external_output toggles whether the output grabber collects the third party
#                 output. We note that for the windows operating system the
#                 default will be off.
# default True (yes/no can also be used)
#external_output: yes
