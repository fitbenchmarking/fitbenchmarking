# Use ubuntu as a parent image
FROM ubuntu:24.04

ARG DEBIAN_FRONTEND=noninteractive

# Install the packages we need to build fitbenchmarking
RUN apt-get update && apt-get install -y \
    git \
    sudo \
    cmake \
    ninja-build \
    mpich \
    curl

# use uv to manage python version
RUN curl -LsSf https://astral.sh/uv/install.sh | sh
RUN $HOME/.cargo/bin/uv python install 3.12

# set up a venv to stop python/python3 sillyness
ENV VIRTUAL_ENV=/opt/venv
RUN $HOME/.cargo/bin/uv venv --seed $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

RUN pip install wheel
RUN pip install "pytest>3.6" \
    pytest-cov \
    coveralls \
    "coverage~=4.5.4" \ 
    "urllib3==1.23" \
    mock \
    meson 

WORKDIR /

##############################################################
# Update cmake -- kitware hosts 3.22 where ubuntu hosts 3.16 #
# (follows instructions on apt.kitware.com)                  #
##############################################################
RUN curl https://apt.kitware.com/kitware-archive.sh | sh -s -- noble

RUN sudo apt-get install -y cmake

#################
# Install pygsl #
#################

RUN apt-get update && \
 apt-get install -y gsl-bin \
 libgsl-dev \
 libgsl-dbg

##################
# Install RALFit #
##################
RUN apt-get install -y gfortran \
    lcov \
    libblas-dev \
    liblapack-dev \
    libgdal-dev

RUN git clone https://github.com/ralna/RALFit

RUN mkdir -p /RALFit/libRALFit/build
WORKDIR /RALFit/libRALFit/build

ENV CC=gcc
RUN cmake .. && make && make install

# make install for RALFit doesn't work in a container, so manually pip install
RUN pip install .

ENV LD_LIBRARY_PATH=/RALFit/libRALFit/build/src:$LD_LIBRARY_PATH

################
# Build cutest #
################

RUN mkdir -p /cutest

WORKDIR /cutest

RUN git clone https://github.com/ralna/ARCHDefs ./archdefs && \
    git clone https://github.com/ralna/SIFDecode ./sifdecode && \
    git clone https://github.com/ralna/CUTEst ./cutest

RUN mkdir pycutest_cache

ENV ARCHDEFS=/cutest/archdefs/ \
    SIFDECODE=/cutest/sifdecode/ \
    MASTSIF=/home/fitbenchmarking/examples/benchmark_problems/SIF/ \
    CUTEST=/cutest/cutest/ \
    MYARCH="pc64.lnx.gfo" \
    PYCUTEST_CACHE=/cutest/pycutest_cache/

ENV PYTHONPATH="${PYCUTEST_CACHE}:${PYTHONPATH}"

# Install sifdecode

WORKDIR $SIFDECODE
RUN printf "1\n1\nn" > sifdecode.input && \
    printf "1\nny" >> sifdecode.input && \
    ./install_sifdecode  < sifdecode.input

# Install cutest
WORKDIR $CUTEST
RUN meson setup builddir
RUN meson compile -C builddir
RUN meson install -C builddir

# install pycutest
RUN python -m pip install pycutest

##################
# Install Mantid #
##################

WORKDIR /
RUN apt-get -y install libjemalloc-dev

# Requires NeXuS format
RUN wget -O nexus.tar.gz https://github.com/nexusformat/code/archive/refs/tags/v4.4.3.tar.gz
RUN tar --no-same-owner --no-same-permissions -xzf nexus.tar.gz
RUN mv code-4.4.3 nexus
RUN mkdir nexus/build

ARG MANTID_VERSION=6.10.0

RUN git clone -b "v$MANTID_VERSION" --depth 1 https://github.com/mantidproject/mantid.git 
RUN mv mantid mantid-$MANTID_VERSION

RUN pip install versioningit
RUN apt-get -y install libboost-all-dev 
RUN apt-get -y install libpoco-dev
RUN apt-get -y install libtbb-dev

WORKDIR /nexus/build
RUN cmake -G Ninja ..
RUN cmake --build .
RUN cmake --install .
RUN mkdir -p /opt/Mantid
WORKDIR /opt/Mantid
RUN cmake -G Ninja /mantid-$MANTID_VERSION -DENABLE_MANTIDQT=OFF -DENABLE_WORKBENCH=OFF -DENABLE_DOCS=OFF -DENABLE_PRECOMMIT=OFF

RUN cmake --build .

ENV VIRTUAL_ENV=/opt/venv
ENV PATH=$OLD_PATH
RUN unset OLD_PATH

ENV PYTHONPATH=$PYTHONPATH:/opt/Mantid/lib:/opt/Mantid/bin
RUN python -m pip install IPython six python-dateutil pyyaml h5py
ENV HDF5_DISABLE_VERSION_CHECK=2
RUN /opt/Mantid/bin/mantidpython -m  mantid.simpleapi || echo "expected segfault on first run"

WORKDIR /

#################
# install pygsl #
#################
RUN apt-get -y install swig
RUN python -m pip install pygsl

#################
# Install Ceres #
#################
WORKDIR /

RUN apt-get install -y libgoogle-glog-dev \
 libgflags-dev \
 libatlas-base-dev \
 libeigen3-dev \
 libsuitesparse-dev
# Make ceres directory 
RUN mkdir -p /ceres
# Change working directory to ceres  
WORKDIR /ceres 
# Download ceres solver 2.0.0 tar 
RUN wget http://ceres-solver.org/ceres-solver-2.0.0.tar.gz
# unpack the tar file 
RUN tar zxf ceres-solver-2.0.0.tar.gz
# Clone PyCeres repository
RUN git clone https://github.com/Edwinem/ceres_python_bindings.git ./ceres-solver-2.0.0/ceres_python_bindings
# Initialise and update ceres_python_bindings for PyBind11
RUN git -C ./ceres-solver-2.0.0/ceres_python_bindings submodule init
RUN git -C ./ceres-solver-2.0.0/ceres_python_bindings submodule update
# Append PyCeres installer to ceres solver camkelist.txt
RUN echo "include(ceres_python_bindings/AddToCeres.cmake)" >> ./ceres-solver-2.0.0/CMakeLists.txt
# Make ceres-bin directory
RUN mkdir -p ceres-bin 
# Change working directory to ceres-bin
WORKDIR /ceres/ceres-bin
RUN cmake ../ceres-solver-2.0.0
RUN make -j3
RUN make install
# Set the PYCERES_LOCATION
ENV PYCERES_LOCATION=/ceres/ceres-bin/lib

WORKDIR /


###########
# Theseus #
###########

WORKDIR /

RUN apt-get install libsuitesparse-dev

# Install pytorch
RUN pip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cpu

# Install theseus
RUN pip install theseus-ai

WORKDIR /

###########
# Tidy up #
###########
RUN apt -y autoremove

## ALL SET UP ##
WORKDIR /home/
