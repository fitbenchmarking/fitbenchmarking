diff --git a/Framework/API/inc/MantidAPI/PreviewManager.h b/Framework/API/inc/MantidAPI/PreviewManager.h
index a9c84f2d06e..a13e9caa732 100644
--- a/Framework/API/inc/MantidAPI/PreviewManager.h
+++ b/Framework/API/inc/MantidAPI/PreviewManager.h
@@ -15,6 +15,7 @@
 #include <type_traits>
 #include <utility>
 #include <vector>
+#include <stdexcept>
 
 namespace Mantid {
 namespace API {
diff --git a/Framework/Parallel/src/IO/Chunker.cpp b/Framework/Parallel/src/IO/Chunker.cpp
index 91ee69add9f..64be6abc995 100644
--- a/Framework/Parallel/src/IO/Chunker.cpp
+++ b/Framework/Parallel/src/IO/Chunker.cpp
@@ -8,6 +8,7 @@
 #include <iterator>
 #include <numeric>
 #include <utility>
+#include <cstdint>
 
 #include "MantidParallel/IO/Chunker.h"
 
diff --git a/Framework/PythonInterface/core/src/ErrorHandling.cpp b/Framework/PythonInterface/core/src/ErrorHandling.cpp
index a2f61284629..6a61faea95e 100644
--- a/Framework/PythonInterface/core/src/ErrorHandling.cpp
+++ b/Framework/PythonInterface/core/src/ErrorHandling.cpp
@@ -39,7 +39,7 @@ void tracebackToStream(std::ostream &msg, PyTracebackObject *traceback, bool roo
     msg << "caused by";
 
   msg << " line " << traceback->tb_lineno << " in \'"
-      << extract<const char *>(traceback->tb_frame->f_code->co_filename)() << "\'";
+      << extract<const char *>(PyFrame_GetCode(traceback->tb_frame)->co_filename)() << "\'";
   tracebackToStream(msg, traceback->tb_next, false);
 }

diff --git a/Framework/PythonInterface/mantid/kernel/funcinspect.py b/Framework/PythonInterface/mantid/kernel/funcinspect.py
index e5aad721..25bae43f 100644
--- a/Framework/PythonInterface/mantid/kernel/funcinspect.py
+++ b/Framework/PythonInterface/mantid/kernel/funcinspect.py
@@ -31,52 +31,8 @@ def replace_signature(func, signature):
     else:
         # Drop this code when we dro Python 2 support
         # Code object is different in Python 3
-        if hasattr(func, "func_code"):
-            # Version 2
-            code_attr = "func_code"
-            f = func.func_code
-            c = f.__new__(
-                f.__class__,
-                f.co_argcount,
-                f.co_nlocals,
-                f.co_stacksize,
-                f.co_flags,
-                f.co_code,
-                f.co_consts,
-                f.co_names,
-                signature,
-                f.co_filename,
-                f.co_name,
-                f.co_firstlineno,
-                f.co_lnotab,
-                f.co_freevars,
-            )
-        else:
-            code_attr = "__code__"
-            f = func.__code__
-            new_args = [
-                f.__class__,
-                f.co_argcount,
-                f.co_kwonlyargcount,
-                f.co_nlocals,
-                f.co_stacksize,
-                f.co_flags,
-                f.co_code,
-                f.co_consts,
-                f.co_names,
-                signature,
-                f.co_filename,
-                f.co_name,
-                f.co_firstlineno,
-                f.co_lnotab,
-                f.co_freevars,
-            ]
-            # Python 3.8 supports positional-only arguments and has an extra
-            # keyword in the constructor
-            if hasattr(f, "co_posonlyargcount"):
-                new_args.insert(2, f.co_posonlyargcount)
-            c = f.__new__(*new_args)
-        # endif
+        code_attr = "__code__"
+        c = func.__code__.replace(co_nlocals=2, co_varnames=signature)
         setattr(func, code_attr, c)


@@ -222,6 +178,7 @@ def decompile(code_object):
 # We must list all of the operators that behave like a function calls in byte-code
 # This is for the lhs functionality
 OPERATOR_NAMES = {
+    "CALL",
     "CALL_FUNCTION",
     "CALL_FUNCTION_VAR",
     "CALL_FUNCTION_KW",
